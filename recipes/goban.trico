
# Give the goban its own sprite; mainly so that (bg) color scheme can differ from that of text screen
define "goban_spr" (sprite 1)
define "goban" (* 31 1024)
setallb goban_spr 8 8 19 19 (lsb goban) (msb goban) 0 0x00 0x23 0x20

# Give the stones their own sprite
define "stones_spr" (sprite 2)
define "stones" (+ goban (* 19 19))
setallb stones_spr 8 8 19 19 (lsb stones) (msb stones) 0 0x01 0x02 0x11

# These are simple liberties, i.e.: one free point can count up to 4x double
define "liberties" (+ stones (* 19 19))

define "move_spr" (sprite 3)
define "move_tile" (+ liberties (* 19 19))
setallb move_spr 112 0 1 1 (lsb move_tile) (msb move_tile) 0 0x01 0x02 0x11
setb move_tile 0x13

# for an outline (print) style:
#setb  goban_spr colors0 0x01; setb goban_spr colors1 0x02
#setb stones_spr colors1 0x01; setb  move_spr colors1 0x01

# This function maps coords so that they start at 1,
# like a player would use them
define "point" {
    args "x" "y";
    + (* (- y 1) 19) (- x 1)
}

define "x" 1
define "y" 1

# Corners
setb goban (point 1 1) 0x08;
setb goban (point 19 1) 0x0A;
setb goban (point 1 19) 0x18;
setb goban (point 19 19) 0x1A;

loop {
    add "x" 1;
    setb goban(point x  1) 0x09; # Top edge
    setb goban (point x 19) 0x19; # Bottom edge
    setb goban (point 1 x) 0x10; # Left edge (re-using 'x' for 'y')
    setb goban (point 19 x) 0x12; # Right edge
    < x 18
}


set "x" 2;
set "y" 2;

loop {
    loop {
        setb goban (point x y) 0x11;
        add "x" 1;
        < x 19
    };
    set "x" 2;
    add "y" 1;
    < y 19
}

# Star points
set "x" 4;
set "y" 4;
loop {
    loop {
        setb goban (point x y) 0x1B;
        add "x" 6;
        < x 17
    };
    set "x" 4;
    add "y" 6;
    < y 17
}

# Play a few stones
#setb stones (point 16 4) 0x13
#setb stones (point 4 16) 0x0B
#setb stones (point 3 16) 0x13

define "cursor" (+ screen (* 21 32))
set "cursor" (write cursor "Well this is fun.\n")

draw

# propagate new liberty count over fully connected shape;
# optionally remove stones if count is zero
define "floodfill" {
    args "color" "value" "x" "y" "remove";
    if (&& (>= x 1) (>= y 1) (<= x 19) (<= y 19) (= (getb stones (point x y)) color) (! (= (getb liberties (point x y)) value)) ) {
        setb liberties (point x y) value;
        if (& (return remove) (= value 0)) {
            setb stones (point x y) 0; # capture
            # increase liberties of surrounding groups
            define "opposite" (if (= color 0x13) { return 0x0b } { return 0x13 });
            floodfill opposite (+ (getb liberties (point x (- y 1))) 1) x (- y 1) false;
            floodfill opposite (+ (getb liberties (point (- x 1) y)) 1) (- x 1) y false;
            floodfill opposite (+ (getb liberties (point x (+ y 1))) 1) x (+ y 1) false;
            floodfill opposite (+ (getb liberties (point (+ x 1) y)) 1) (+ x 1) y false;
        };
        floodfill color value x (- y 1) remove;
        floodfill color value (- x 1) y remove;
        floodfill color value x (+ y 1) remove;
        floodfill color value (+ x 1) y remove;
    }
}

# Determine added liberty count of connected field
define "added_value" {
    args "color" "x" "y";
    if (&& (>= x 1) (>= y 1) (<= x 19) (<= y 19)) {
        if (= color (getb stones (point x y))) {
            define "result" (- (getb liberties (point x y)) 1);
            floodfill color 0 x y false; # Ensure we don't count the same group again later; we set the actual new liberty in the end
            return result
        } {
            if (= 0 (getb stones (point x y))) {
                return 1
            }
        }
    }
    # else branches return 0
}

define "play" {
    args "color" "x" "y";

    # Subtract a liberty from connected opposite stones
    define "opposite" (if (= color 0x13) { return 0x0b } { return 0x13 });
    floodfill opposite (- (getb liberties (point x (- y 1))) 1) x (- y 1) true;
    floodfill opposite (- (getb liberties (point (- x 1) y)) 1) (- x 1) y true;
    floodfill opposite (- (getb liberties (point x (+ y 1))) 1) x (+ y 1) true;
    floodfill opposite (- (getb liberties (point (+ x 1) y)) 1) (+ x 1) y true;

    define "newval" 0;
    add "newval" (added_value color x (- y 1)); # prints "top   : "; print newval;
    add "newval" (added_value color (- x 1) y); # prints "left  : "; print newval;
    add "newval" (added_value color x (+ y 1)); # prints "bottom: "; print newval;
    add "newval" (added_value color (+ x 1) y); # prints "right : "; print newval;

    # prints (if (= color 0x13) { return "b " } { return "w " });
    # print x y newval;

    setb stones (point x y) color;
    setb move_tile opposite;
    floodfill color 0xFF x y false; # First fill with unique value to give flood fill a stop condition
    floodfill color newval x y false; # Then fill with actual value
}

loop {
    if (! (&& (= (/ pointer_x 8) x) (= (/ pointer_y 8) y))) {
        set "x" (/ pointer_x 8);
        set "y" (/ pointer_y 8);
        setallb move_spr (* x 8) (* y 8) 8 8; # show cursor at nearest grid pos, and make visible

        draw;
    };
    if (return click) {
        set "click" 0;
        if (&& (>= x 1) (>= x 1) (<= x 19) (<= y 19)) {
            #setb stones (point x y) (getb move_tile);
            play (getb move_tile) x y;
            setb move_spr width 0;
            setb move_spr height 0; # make opposite invisible until cursor has moved
            draw;
        }
    };
    catchup
}

