# Pasta Core Language Definition Test Set
#
# This file both tests and defines the core of the Pasta language,
# which is supposed to remain the same between otherwise varying
# implementations, some of which stay close to hardware on purpose.
#
# Optional features and wider tolerances are not tested, but where
# relevant are described as a MAYBE comment, detailing the variant
# of attention.

define "green"  "\e[32m";
define "red"    "\e[31m";
define "normal" "\e[0m";

define "tests_run" 0;
define "succeeded" 0;

define "test" {
    args "comment" "expected" "result";

    add "tests_run" 1;

    if (= expected result) {
        add "succeeded" 1;
        print green comment normal "\n"
    } {
        print red comment normal "\n"
    }
};

# Integer functions:
# - At least a positive range of 0...65535
# - Signed integer literals MAYBE unsupported!
# - Negative integers MAYBE unsigned equivalents to compare and print functions!
# - More than two arguments MAYBE supported!

test "+" 65535 (+ 65534 1);
test "-" 0     (- 1 1);
test "*" 6     (* 2 3);
test "/" 3     (/ 13 4);
test "%" 1     (% 13 4);

# Boolean
test "true  = 1"   1 true;
test "false = 0"  0 false;
test "! nonzero"  0 (! 42);

# Binary
test "hex" 42 0x2a;
test "bin" 42 0b101010;
test "&" 2 (& 2 3);
test "|" 3 (| 1 2);
test "^" 1 (^ 2 3);

# Logical
test "&&" true (&& true 42);
test "||" true (|| false 33);

# Comparisons
test "<"  true  (< 1 2);
test "="  false (= 1 2);
test ">"  false (> 1 2);
test "<=" true  (<= 1 2);
test ">=" false (>= 1 2);

# Variables:
define "x" 42;
test "define" 42 x;
set "x" 33;
test "set"    33 x;
add "x" 22;
test "add"    55 x;
sub "x" 22;
test "sub"    33 x;

# Loops:
# - This form oddly is unique to Pasta, although it is very elegant
# - The unary variant (optionally with an embedded 'if') works for all cases
# - The variant with a separate test block MAYBE deprecated in the future
loop {
    if (< x 42) {
        add "x" 10;
        return true;
    }
};
test "loop" 43 x;


# Dynamic features:
# - All core functions CAN be used as arguments (= first-class functions), but
#   for the time being expressions MUST start with function label
# - All core functions MAYBE insensitive to redefinition
# - While scopes ARE nested, this MAYBE dynamic scope (= caller's variables
#   accessible from callee scope), even for functions, callbacks, etc.
# - The core block functions 'if' and 'loop' do NOT change (dynamic) scope
# - Creative argument handling can positively impact performance; but in terms
#   of scope and accessibility, they SHOULD behave like varables
# - All expressions evaluate, so use 'return 42' to yield 42 where a full
#   expression is expected
test "args"  1 1; # the test function itself demoes this already
test "block" 42 (if true { return 42 });
test "scope" 43 (if true { return x });
test "return" 42 (return 42);
test "nesting" 42 ( if true { if true { return 42 }});

# Strings
# - Only string literals match on '='; constructed strings are not 'uniqued'
#test "$ for string" "42" ($ 42)

print "Tests run: " ($ tests_run) "\n";
print "Succeeded: " ($ succeeded) "\n"

# NOTE: original Pasta is picky on not evaluating sequence ending with ';'
# This SHOULD not matter
