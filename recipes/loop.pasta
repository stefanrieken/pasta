# Like the 'args' syntax, 'loop' was born from a need to keep things simple,
# and it works surprisingly well: the block argument is repeated until it
# returns a false value (0).

print "\nSimple do ... while style loop:\n"

define "i" 1;
loop {
    print ($ i) " ";
    set "i" (+ 1 i);
    <= i 10
}

print "\n\nTwo-block while style loop:\n"

set "i" 1;
loop {<= i 10} {
    print ($ i) " ";
    set "i" (+ i 1)
}

print "\n\nNested 'if'-based loop (saves repeating next-item statements):\n"

set "i" 0;
loop {
    set "i" (+ i 1);
    if (<= i 10) {
        print ($ i) " ";
        return true
    }
}
print "\n"

