define "cursor" screen;

define "button" {
    args "text";
    set "cursor" (write cursor "\x08\x0c\x0c\x0c\x0c\x0c\x0c");
    setb cursor 0x0a; add "cursor" 1; # can't write graphical char under 'newline' value
    set "cursor" (write cursor "\n\x0d" text "\x0d\n");
    set "cursor" (write cursor "\x18\x0c\x0c\x0c\x0c\x0c\x0c\x1a\n")
}

button "save  "
button "color "
button "page 0"

define "sheet" (* 31 1024)
define "sheet_spr" (sprite 1)
setallb sheet_spr 64 0 8 8 (lsb sheet) (msb sheet) 0 0xA0 0x10 0x32 # set transparent=none; # default color scheme

define "colorref" (+ sheet 256)
write colorref "0"
define "color_spr" (sprite 2)
setallb color_spr 48 32 1 1 (lsb colorref) (msb colorref) 0 0x00 0x10 0x32

define "paletteref" (+ colorref 1)
setallb paletteref 0b00000000 0b01000000 0b10000000 0b11000000

define "paletteref_spr0" (sprite 3)
setallb paletteref_spr0 64 208 4 1 (lsb paletteref) (msb paletteref) 2 0x50 0x10 0x32
define "paletteref_spr1" (sprite 4)
setallb paletteref_spr1 128 208 4 1 (lsb paletteref) (msb paletteref) 2 0x50 0x54 0x76
define "paletteref_spr2" (sprite 5)
setallb paletteref_spr2 64 224 4 1 (lsb paletteref) (msb paletteref) 2 0x50 0x98 0xBA
define "paletteref_spr3" (sprite 6)
setallb paletteref_spr3 128 224 4 1 (lsb paletteref) (msb paletteref) 2 0x50 0xDC 0xFE

define "page" {
    args "n";
    define "i" 0;
    loop {
        setb sheet i (+ n i);
        add "i" 1;
        <= i 64
    };

    draw
}

page 0

define "tilemem" 0x5000
define "color_idx" 0b00


loop {
    if (return click) {
        if (&& (>= pointer_x 64) (< pointer_y 192)) {
            define "x" (/ (- pointer_x 64) 3); # offset on screen
            define "y" (/ pointer_y 3); # and scale

            define "byte" (+ (* y 16) (/ x 4));
            define "bits" (* (% x 4) 2);
            define "mask" (<< 0b11 (- 6 bits));
            define "value"  (<< color (- 6 bits));

            #prints "painting"; print byte;
            setb tilemem (* (getb sheet) 16) byte (| (& (getb tilemem (* (getb sheet) 16) byte) (~ mask)) value);

            draw (+ (* x 3) 64) (* y 3) 3 3;  # redraw affected area only
        };
        if (&& (< pointer_x 64) (>= pointer_y 0) (< pointer_y 24)) {
            set "click" 0;
            save_sheet (+ tilemem (* (getb sheet) 16)) palette;
            setallb (+ screen 0x25) 0x64 0x21; #say 'saved'
            draw;
            setallb (+ screen 0x25) 0 0 # clear for next repaint
        };
        if (&& (< pointer_x 64) (>= pointer_y 24) (< pointer_y 48)) {
            set "click" 0; # stop repeats
            set "color_idx" (& (+ color_idx 1) 0b11); # Adjust active color.
            setb colorref (+ 48 color_idx); # Set color number
            # Adjust colorref background
            if (= color_idx 0) { setb color_spr colors0 0x10 } # don't have the same background (color 0) as foreground color
             { setb color_spr colors0 color_idx };
            draw 48 32 8 8 # redraw color_idx sprite only
        };
        if (&& (< pointer_x 64) (>= pointer_y 48) (< pointer_y 72)) {
            set "click" 0; # stop repeats
            page (+ (getb sheet) 64);
            setb (+ screen 0x0E6) (+ 0x30 (/ (getb sheet) 64));
            draw
        }
    } {
         if (&& (>= pointer_x 64) (< pointer_y 192)) {
            define "x" (/ (- pointer_x 64) 3); # offset on screen
            define "y" (/ pointer_y 3); # and scale

            setb (+ screen 1019) (+ (/ x 10) 48); # 48 = '0'
            setb (+ screen 1020) (+ (% x 10) 48);
            setb (+ screen 1021) 47; # '/'
            setb (+ screen 1022) (+ (/ y 10) 48);
            setb (+ screen 1023) (+ (% y 10) 48);
            draw 215 247 40 8 # redraw affected area only
        };
    };
    catchup;
    return true
}
